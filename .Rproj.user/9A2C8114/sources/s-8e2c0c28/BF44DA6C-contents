#Joschka Hey
#Shiny web application to run the R library Repguide

# This is a Shiny web application. You can run the application by clicking
# the 'Run App' button above.

#libraries
if(!"shiny"%in%  installed.packages()) install.packages("shiny")
library(shiny)
if(!"Repguide"%in%  installed.packages()){
  if (!requireNamespace("remotes", quietly = TRUE))
    install.packages("remotes")
  remotes::install_github(repo = 'tanaylab/repguide')
}
library(Repguide)
if(!"data.table"%in%  installed.packages()) install.packages("data.table")
library(data.table)

# Define UI for application that draws a histogram
ui <- fluidPage(# Application title
  #Logo of Repguide
  titlePanel(
    title = div(
      img(
        src = "logo.png",
        height = 200,
        width = 200
      ),
      "Repguide - design of guideRNAs for CRISPR/dCas9 targeting of repetitive DNA sequences"
    ),
    h1("Repguide workflow:"),
    #Image ofRepguide workflow
    img(
      src = "schematic.png" ,
      height = 280,
      width = 800
    )
  ),
  
  # Sidebar input selection
  sidebarLayout(
    sidebarPanel(
      h4("Specify Repguide options for Target exploration"),
      selectInput(
        "ref_genome",
        label = h6("Select reference genome:"),
        choices = list(
          "Human GRCh38/hg38" = "hg38",
          "Human GRCh37/hg19" = "hg19",
          "Mouse GRCh38/mm10" = "mm10"
        ),
        selected = 2
      ),
      textInput(
        "target_repeats",
        label = h6("Select target class of repeats:"),
        value = NULL,
        placeholder = "Enter repeat class..."
      ),
      textInput(
        "whitelist_repeats",
        label = h6("Select repeat class or classes to be whitelisted:"),
        value = NULL,
        placeholder = "Enter repeat class ..."
      ),
      sliderInput(
        "gap_frequencies",
        label = h6("Maximum gap frequency for target alignment:"),
        min = 0,
        max = 1,
        value = 0.8
      ),
      actionButton("action_target", "Submit target specifications"),
      
      h4("Specify Repguide options for guide generation"),
      h5("Restrict guideRNA design to parts on consensus sequence"),
      textInput(
        "start_position",
        label = h6("Relative start position:"),
        value = NULL,
        placeholder = "Enter start position, e.g. 50"
      ),
      textInput(
        "end_position",
        label = h6("Relative end position:"),
        value = NULL,
        placeholder = "Enter end position, e.g. 600"
      ),
      sliderInput(
        "guide_length",
        label = h6("Basepair size of the guideRNAs:"),
        min = 12,
        max = 26,
        value = 16
      ),
      sliderInput(
        "n_mismatches",
        label = h6(
          "Maximal number of tolerated mismatches when assessing guideRNA binding targets:"
        ),
        min = 0,
        max = 3,
        value = 0
      ),
      textInput(
        "five_prime_seq",
        label = h6("Sequence requirement for 5' start of guideRNAs:"),
        value = NULL,
        placeholder = "Enter nucleotide, e.g. G for transcription from U6 promoter"
      ),
      sliderInput(
        "gc_content",
        label = h6("Allowed GC content for guidesRNAs:"),
        min = 0,
        max = 1,
        value = c(0.4, 0.8)
      ),
      sliderInput(
        "min_Son",
        label = h6("Minimal on target score of guides:"),
        min = 0,
        max = 100,
        value = 50
      ),
      sliderInput(
        "alpha",
        label = h6(
          "Off-target score coefficient (large alpha penalizes guides with high off-target score):"
        ),
        min = 0,
        max = 100,
        value = 0
      ),
      h4("Specify Repguide options for guide combination"),
      sliderInput(
        "max_guides",
        label = h6(
          "Maximum number of distinct guides to consider when calculating combinations:"
        ),
        min = 0,
        max = 30,
        value = 5
      ),
      sliderInput(
        "iterations",
        label = h6("Number of greedy search iterations:"),
        min = 0,
        max = 50,
        value = 10
      ),
      sliderInput(
        "alpha_combinations",
        label = h6(
          "Off-target score coefficient (large alpha penalizes combinations with high off-target score):"
        ),
        min = 0,
        max = 100,
        value = 10
      )
      
    ),
    #main panel
    mainPanel(
      #plot first output: target repeats
      h1("Target exploration:"),
      plotOutput("targets_repeats", height="600px"),
      h1("guideRNA design:"),
      plotOutput("guides", height="800px"),
      h1("Combinatorial optimization:"),
      plotOutput("combinations", height="1000px")
    )
  ))

