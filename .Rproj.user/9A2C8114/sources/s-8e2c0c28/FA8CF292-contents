---
title: "Repguide Workflow"
output: html_document
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```

## Repguide: LTR5_HS repeats
#Load libraries
```{r}
library(BSgenome.Hsapiens.UCSC.hg19)
library(TxDb.Hsapiens.UCSC.hg19.knownGene)
library(org.Hs.eg.db)
library(Repguide)
```
#Paths
```{r}
additional.dir <- "/home/heyj/c010-datasets/Internal/LTR/guideDesign/"
```
#Data
```{r}
fantom5_hg19_gr <- readRDS(file.path(additional.dir, "Workspaces_David", "FANTOM5_gr.RDS"))
repeats_path <- file.path(additional.dir, "data", "hg19_repeats")
```
#Create blacklisted promoter regions
```{r}
essentials <- read.table(file.path(additional.dir, "data","core-essential-genes-sym_HGNCID.txt"), stringsAsFactors=FALSE) 
txdb <- TxDb.Hsapiens.UCSC.hg19.knownGene
GENE <-  genes(txdb)
Promoter<- promoters(GENE, upstream = 1000, downstream = 1000)
hs <- org.Hs.eg.db
promoter_ids <- select(hs, keys= essentials$V1,columns = c("ENTREZID", "SYMBOL"),keytype = "SYMBOL")
essentials_promoter <- Promoter[Promoter$gene_id %in% promoter_ids$ENTREZID,]
```
#Create Whitelisted regions
```{r}
repeats <- readRDS(file.path(additional.dir, "Workspaces_David","repeats.RDS"))
repeats_LTR5A <- repeats[grep("LTR5A", repeats$repName),]
repeats_LTR5B <- repeats[grep("LTR5B", repeats$repName),]
repeats_LTR5 <- repeats[grep("\\LTR5\\b", repeats$repName),]
LTR5_whitelist <- c(repeats_LTR5A, repeats_LTR5B, repeats_LTR5)
length(repeats[grep("LTR5_Hs", repeats$repName),])
```
#create guide set
```{r}
gs <- createGuideSet(genome = BSgenome.Hsapiens.UCSC.hg19,           # Hsapiens is the short version of BSgenome.Hsapiens.UCSC.hg38
                     tes = repeats_path,          # TE annotation
                     cis = fantom5_hg19_gr,              # TSS and/or enhancer annotation 
                     temp = tempdir(),            # Directory for temporary files
                     blacklist = essentials_promoter, # Regions to blacklist
                     whitelist= LTR5_whitelist, 
                     n_cores = 10)
```
#Add target loci ( in this case LTR12 )
```{r}
gs <- addTargets(gs, targets = "LTR5_Hs", force=TRUE)
```
#Further inspections of repeat classes; however subsamples 2 % 
```{r}
gs <- addAlignments(gs, max_gap_freq = 0.8) 
plotTargets(gs)
```
#Create data frame with regions of repeat class we want to target
```{r}
consensus_df<- data.frame("repname"= c("LTR5_Hs"), start=c(1), end=c(800)) #untill tss
```
#create guideset
```{r}
gs <- addGuides(gs,                             # our guideSet
                n_mismatches = 3,               # max allowed mismatch of reported binding sites
                min_Son = 50,                  # minimal score requirement for valid guides
                guide_length = 16,              # length of the guideRNAs to design
                consensus_range = consensus_df, # restrict guideRNA design to parts on consensus
                gc_content = c(0.4, 0.8),       # allowed guide GC content (between 40 and 80 percent)
                alpha = 10, 
                #five_prime_seq = "G", 
                n_clust = 12,
                force=TRUE)       # allowed guide GC content (between 40 and 80 percent)
plotGuides(gs)
```

#calculate binding profiles of all possible combinations 
```{r}
gs <- addCombinations(gs,              # our guideSet
                      iterations = 50, # number of greedy search iterations
                      greedy = TRUE,   # run greedy algorithm
                      alpha = 10,     # off-target score penalty coefficient
                      max_guides = 12, force=TRUE)  # maximal number of guides to consider
plotCombinations(gs)
```
#export complete dataset
```{r}
#Repguide::export(gs,
#       outdir = "190813_LTR5HS_WhiteOn_withoutG_alpha_10",
#       dpi = 320,         # image resolution,
#       full = T,       # exports stats for all guides, not only selected ones
#       workspace = F,
#       force=TRUE) 
```


